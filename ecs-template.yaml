AWSTemplateFormatVersion: "2010-09-09"
Description: Creates ECS

Parameters:
  #  Using default VPC and subnets in eu-west-1
  VPC:
    Type: String
    Default: vpc-a39f61da
  SubnetA:
    Type: String
    Default: subnet-0d414ad4c89f96049
  SubnetB:
    Type: String
    Default: subnet-b65421ec
  #  IAM task role and task execution role for task definition
  TaskRoleForTaskDefinition:
    Type: String
    Default: arn:aws:iam::821383200340:role/Konttiproggis-task-role
  TaskExecutionRoleForTaskDefinition:
    Type: String
    Default: arn:aws:iam::821383200340:role/ecsTaskExecutionRole
  #  Latest Docker image located in ECR
  DockerImage:
    Type: String
    Default: 821383200340.dkr.ecr.eu-west-1.amazonaws.com/konttiproggis:latest
  #  Opening port 5000 to application
  ContainerPort:
    Type: Number
    Default: 5000
  #  Service name that can be changed if needed
  ServiceName:
    Type: String
    Default: Konttiproggis-service
  # Load balancer port (http)
  LoadBalancerPort:
    Type: Number
    Default: 80
  HealthCheckPath:
    Type: String
    Default: /

Resources:
  KonttiproggisCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Konttiproggis-klusteri
      Tags:
        - Key: Owner
          Value: Kati

  KonttiproggisTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !Ref TaskExecutionRoleForTaskDefinition
      TaskRoleArn: !Ref TaskRoleForTaskDefinition
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Image: !Ref DockerImage
          PortMappings:
            - ContainerPort: !Ref ContainerPort
      Family: konttiproggis-task
      # awsvpc is required for Fargate
      NetworkMode: awsvpc
      Tags:
        - Key: Owner
          Value: Kati

  KonttiproggisService:
    Type: AWS::ECS::Service
    DependsOn:
      - ListenerHTTP
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref KonttiproggisCluster
      TaskDefinition: !Ref KonttiproggisTaskDefinition
      DeploymentConfiguration:
        MinimumHealthyPercent: 0
        MaximumPercent: 200
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ServiceSecurityGroup
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, LoadBalancerSecurityGroup]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: 0.0.0.0/0

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      # will look for a 200 status code by default unless specified otherwise
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Name: !Join ['', [!Ref ServiceName, TargetGroup]]
      Port: !Ref ContainerPort
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60 # default is 300
      TargetType: ip
      VpcId: !Ref VPC

  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref LoadBalancerPort
      Protocol: HTTP

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      LoadBalancerAttributes:
       # this is the default, but is specified here in case it needs to be changed
       - Key: idle_timeout.timeout_seconds
         Value: 60
      Name: !Join ['', [!Ref ServiceName, LoadBalancer]]
      # "internal" is also an option
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
       - !Ref SubnetA
       - !Ref SubnetB